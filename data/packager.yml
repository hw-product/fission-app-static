---
app: "Packager"
nav:
  - name: "Home"
    url: "#top"

  - name: "Configure"
    url: "#configure"

  - name: "Branch"
    url: "#branch"

  - name: "Package"
    url: "#package"

  - name: "Release"
    url: "#release"

  - name: "Pricing"
    url: "/s/pricing"

banner:
  title: "Make system packages, not war."
  subtitle: "Software-packaging-as-a-service"
  desc:
    - "Does manually installing software make you want to rage against the machine? Stop the fighting! If you can say \"Works on my machine!\", you can create shippable system packages."
  button:
    text: "Learn More"
    url: "#configure"
  img: "http://placehold.it/300x300.png&text={ example DSL }"
  code: 
    lang: "json"
    content: |
      {
        "target": {
          "platform": 'ubuntu',
          "version": '12.04',
          "package": 'deb',
          "arch": 'amd64'
        },
        "dependencies" {
          "build": ['libpq-dev'],
          "runtime": ['libpq5']
        },
        "build" {
          "name": 'myapp',
          "template": 'rails',
          "install_prefix", '/var/www/myapp'
        }
      }

problem:
  style: "bigquote"
  content:
    - "You don’t need an entire software build toolchain on every server. If you're using configuration management to fetch source files to build binaries and/or run scripts locally on production nodes, you're doing it wrong. If you've been doing that because making packages and maintaining a repository is too hard, now you don't have to."

features:
  style: "row_list"
  items:
    - icon: "fa-edit"
      title: "Configure."
      content: "You already know what dependencies are required to build & run your code on your laptop, just tell us what they are and we'll do the rest."
      url: "#configure"

    - icon: "fa-code-fork"
      title: "Branch."
      content: "Any commits pushed to a branch of your choice can trigger automated package builds."
      url: "#branch"

    - icon: "fa-beer"
      title: "Package."
      content: "Commit your changes, push them up to GitHub, and go have a beer (you've earned it)."
      url: "#package"

    - icon: "fa-gift"
      title: "Release."
      content: "Packager will push packages to the Releases section of your GitHub repo & notify you by email when your packages are ready to use."
      url: "#release"

solution:
  items:
    - id: "configure"
      title: "Your code."
      subtitle: "Add a <code>.packager</code> file & describe your package(s)"
      content:
        - "Packager is a single purpose <abbr title='Continuous Integration'>CI</abbr> service that responds to GitHub webhooks. The <code>.packager</code> configuration file can be written in a simple DSL or JSON and lives in source control alongside your code. Packager can even build multiple dependent packages from a single config file, or if you’re really crazy an entire tree of dependent packages."
        - "Do you need to build a custom runit package that your Rails application depends on? We got that."
        - "Packager has several pre-existing definitions to simplify packaging for common application types. Currently supported templates: <code>:rails</code> for Rails applications, <code>:erlang</code> for Erlang applications, and a <code>:generic</code> default template for everything else. Need something specific? <a href='mailto:support@packager.co'>Ask us!</a>"
      img: "http://placehold.it/500x500.png&text={example}"
      code:
        lang: "ruby"
        content: |
          # -*- mode: ruby -*-
          # -*- encoding: utf-8 -*-
          Packager.build do
            target do
              platform 'ubuntu'
              version '12.04'
              package 'deb'
              arch 'amd64'
            end
            dependencies do
              build ['libpq-dev']
              runtime ['libpq5']
            end
            configure do
              environment 'production'
            end
            build do
              name 'myapp'
              template :rails
              install_prefix '/var/www/myapp'
              commands do
                after.build [
                  'rake middleman'
                ]
              end
            end
          end

    - id: "branch"
      img: "http://placehold.it/500x500.png&text={example}"
      title: "Your existing workflow."
      subtitle: "No need to panic, Packager works with what you already do."
      content:
        - "Many organizations already maintain a branch that represents stable, production-ready code. Packager can continuously build release packages from this branch, or use a dedicated package branch to build packages in a more on-demand manner."
        - "Creating a package is as simple as pushing a commit, Packager works no matter what workflow your team uses. If you like to use tags, just:"
        - "<code>git tag v1.0 && git push --tags</code>"
        - "It just works."
      code:
        lang: "shell"
        content: |
          git checkout -b packages
          git commit -m ‘release package v1.0'
          git push origin packages


    - id: "package"
      img: "http://imgs.xkcd.com/comics/compiling.png"
      title: "Your time."
      subtitle: "Take a break while Packager works"
      content:
        - "The tools have gotten better, but building packages by hand is still time-consuming. Packager frees you to do real work, or just get some coffee."

    - id: "release"
      img: "http://placehold.it/500x500.png&text={example}"
      title: "Your packages."
      subtitle: "Make it easier for your users to install your software"
      content:
        - "Packager delivers lightweight system packages directly to <a href='https://github.com/blog/1547-release-your-software'>Github releases</a>. Optionally, you can choose to have us host a private package repository that Packager will maintain, making fresh system packages readily available to install with an <code>apt-get update && apt-get upgrade</code> or a <code>yum check-update && yum upgrade</code>."
        - "Yes, Packager supports Debian (.deb) <em>and</em> Red Hat (.rpm) package formats!"
        - "What's the difference between Packager packages and the recently popular software packaging trend to include all dependencies in single bloated package? While this approach may initially seem advantageous (because it reduces complexity up-front), it can quickly result in unwanted technical debt in the shape of redundant software on a system, increased risk exposure when software needs to be patched or upgraded, and significantly larger package sizes."
        - "Don’t ship the world, ship lightweight system packages."
      code:
        lang: "shell"
        content: |
          apt-add-repository ‘deb https://pkgd.io/heavywater’ 
          apt-get update 
          apt-get install myapp

